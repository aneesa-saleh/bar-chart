
class BarChartContainer extends React.Component{
  constructor(props){
    super(props);
    this.state = {gdpData: {}};
  }
  
  componentDidMount(){
    let request = obj => {
      return new Promise((resolve,reject) => {
        let xhr = new XMLHttpRequest();
        xhr.open("GET", obj.url);
        xhr.onload = () => {
          if(xhr.status >= 200 && xhr.status < 300)
            resolve(xhr.response);
          else
            reject(xhr.statusText);
        };
        xhr.onerror = () => reject(xhr.statusText);
        xhr.send(obj.body);
      });
    };
    
    let url = "https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/GDP-data.json";
    request({url: url})
          .then(data => {
          let gdpData = JSON.parse(data);
          this.setState({gdpData});
      }); 
  }
  
  render(){
      return (
        <div>
          <BarChart gdpData={this.state.gdpData} />
        </div>);
    }
  }

class BarChart extends React.Component {
  constructor(props){
    super(props);
  }
  componentDidUpdate(){
    let months = [ "January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December" ];
    let margin = {
      top: 20,
      bottom: 45,
      left: 60,
      right: 20
    };
    let w = 940, h = 450, width = w - margin.left - margin.right, height = h - margin.top - margin.bottom; 
    let gdpArr = this.props.gdpData.data.map((d) => {
      return {date: new Date(d[0]), gdp: d[1]};
    });
    let length = gdpArr.length;
    let colorScale = d3.scaleLinear().domain([0, length]).range(['#327d87', '#79b7b3']);
let svg = d3.select(".svgContainer").append("svg")
            .attr("id", "chart")
            .attr("width", w)
            .attr("height", h);
    
let chart = svg.append("g")
            .attr("width", width)
            .attr("height", height)
            .classed("inner-chart", true)
            .attr("transform",`translate(${margin.left},${margin.top})`);
    
    if(this.props.gdpData.id){
      
      let x = d3.scaleBand().rangeRound([0, width], 0).padding(0)
              .domain(gdpArr.map((d) => d.date));
      let y = d3.scaleLinear().range([height, 0])
              .domain(d3.extent(gdpArr, (d) => d.gdp));
      let yValueScale = d3.scaleLinear().range([d3.min(gdpArr, (d) => d.gdp) + 300,d3.max(gdpArr, (d) => d.gdp)])
               .domain(d3.extent(gdpArr, (d) => d.gdp));
      let xAxis = d3.axisBottom()
              .scale(x)
              .tickFormat(d3.timeFormat("%Y"))
              .tickValues(x.domain().filter(function(d,i){ return !(i%21)}));
      
      let yAxis = d3.axisLeft()
              .scale(y);
              //.ticks(10);
      let tip = d3.tip()
                .attr("class","d3-tip")
                .offset([0,0])
                .html((d) => {
                  let gdp = "$" + d.gdp.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,') + " Billion";
                  let date = `${d.date.getFullYear()} - ${months[d.date.getMonth()]}`
                  return `<span class="gdp"><strong>${gdp}</strong></span><br/> <span class="date">${date}</span>`;
                });
      
      chart.append("g")
        .classed("x axis", true)
        .attr("transform", `translate(0,${height})`)
        .call(xAxis);
      
      chart.append("g")
        .classed("y axis", true)
        .call(yAxis)
      
      chart.selectAll(".bar")
        .data(gdpArr)
        .enter()
          .append("rect")
          .classed("bar", true);
      
      chart.selectAll(".bar")
          .attr("x", (d) => x(d.date))
          .attr("y", (d) => y(yValueScale(d.gdp)))
          .attr("height", (d) => height - y(yValueScale(d.gdp)))
          .attr("width", (d) => x.bandwidth())
          .style("fill", (d,i) => colorScale(i))
          .on("mouseover", tip.show)
          .on("mouseout", tip.hide);
      
      chart.selectAll(".bar")
        .data(gdpArr)
        .exit()
        .remove();
      
      chart.select(".y.axis")
        .append("text")
        .classed("axis-label", true)
        .attr("x", 0)
        .attr("y", 0)
        .attr("transform", "translate(17,0) rotate(-90)")
        .text("GDP")
        .style("fill", "black");
      
      svg.call(tip);
    }
  }
  render(){
    let description = `${this.props.gdpData.description}`;
    return (
      <div>
        <h2 className="heading">Gross Domestic Product, USA</h2>
        <div className="svgContainer"/>
        <div className="descriptionWrapper">
          <p className="description">{description}</p>
          <p className="description">{`Source: ${this.props.gdpData.source_name}`}</p>
        </div>
      </div>);
  }
}

ReactDOM.render(<BarChartContainer />, document.querySelector("#root"));
